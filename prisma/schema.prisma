generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Status {
  Active
  Not_Active
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  FINISHED
}

enum Department {
  Management
  Technical_Support
  Customer_Support
  Sales_Marketing
  Administration
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model User {
  id                 String    @id @default(cuid())
  employeeId         String?   @unique
  name               String
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  password           String
  role               UserRole  @default(USER)
  isTwoFactorEnabled Boolean   @default(false)

  twoFactorConfirmation TwoFactorConfirmation?
  employee              Employee?
  accounts              Account[]
  notes                 Note[]
  tasks                 Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id          String     @id @default(cuid())
  userId      String?    @unique
  firstName   String
  lastName    String
  email       String     @unique
  phoneNumber String?
  department  Department
  isActive    Status     @default(Active)
  hireDate    DateTime

  task Task[]

  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, department])
}

model File {
  id       String @id @default(cuid())
  name     String
  mimeType String
  size     Int
  location String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(cuid())
  name String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  categoryId  String?

  package Package[]

  category Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Package {
  id                String  @id @default(cuid())
  name              String
  price             Decimal @default(0.00)
  description       String?
  specification     Json?
  mainFeature       Json?
  additionalFeature Json?
  productId         String?

  product Product? @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id          String   @id @default(cuid())
  title       String
  description String?
  data        Json
  initial     BigInt
  income      BigInt
  outcome     BigInt
  refund      BigInt
  profit  BigInt
  final       BigInt
  net         BigInt
  month       DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id       String  @id @default(cuid())
  userId   String
  title    String
  content  String
  isPublic Boolean @default(false)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String     @id @default(cuid())
  title       String
  userId      String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      TaskStatus
  priority    Priority
  employeeId  String?
  reportUrl   String?

  user     User      @relation(fields: [userId], references: [id])
  employee Employee? @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ? For Auth Purposes
model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
