generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

enum Status {
  Active
  Not_Active
}

enum Department {
  Management
  Technical_Support
  Customer_Support
  Sales_Marketing
  Administration
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  
  accounts              Account[]
  files                 File[]

  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?   @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Employee {
  id          String     @id @default(cuid())
  firstName   String
  lastName    String
  email       String     @unique
  phoneNumber String
  role        Department
  isActive    Status     @default(Active)
  hireDate    DateTime
  createdAt   DateTime   @default(now())

  user   User?
  userId String

  report Report[]

  @@unique([id, role])
}

model File {
  id        Int      @id @default(autoincrement())
  fileName  String
  mimeType  String
  size      Int
  location  String
  createdAt DateTime @default(now())

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[] 
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])

  plans Plan[] 
}

model Plan {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  price       Decimal @default(0.00)
  description String?
  specification Json?
  mainFeature Json?
  additionalFeature Json?

  product     Product @relation(fields: [productId], references: [id])
  productId   Int
}

model Report {
  id          Int        @id @default(autoincrement())
  title       String     @unique
  description String
  filePath    String
  department  Department
  createdAt   DateTime   @default(now())

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
}
