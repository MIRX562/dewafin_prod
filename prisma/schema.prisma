generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Customer {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  phone      String?
  address    String?
  companyId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  invoices      Invoice[]
  subscriptions Subscription[]
  company       Company?       @relation(fields: [companyId], references: [id])

  // Additional fields (optional)
  website String?
  taxId   String?
  notes   String?
}

// Optional model for Customer Subscriptions (if applicable)
model Subscription {
  id         Int       @id @default(autoincrement())
  customerId Int
  planId     Int // Reference to a plan model (if applicable)
  startDate  DateTime
  endDate    DateTime?
  isActive   Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  customer Customer @relation(fields: [customerId], references: [id])
  plan     Plan?    @relation(fields: [planId], references: [id]) // Optional relation to a plan model
}

model Company {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  address String?
  website String?
  taxId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships (optional)
  customers Customer[] // One-to-many with Customer
}

model Invoice {
  id         Int       @id @default(autoincrement())
  customerId Int
  number     String    @unique
  issueDate  DateTime
  dueDate    DateTime?
  amount     Float
  status     String // Draft, Sent, Paid, Overdue, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  customer  Customer      @relation(fields: [customerId], references: [id])
  lineItems InvoiceItem[]
}

model InvoiceItem {
  id          Int    @id @default(autoincrement())
  invoiceId   Int
  description String
  quantity    Int
  unitPrice   Float
  amount      Float // Calculated field

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  invoice Invoice @relation(fields: [invoiceId], references: [id])
}

model Plan {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String
  price       Float
  features    String? // Comma-separated list or JSON object

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships (optional)
  subscriptions Subscription[]
}
